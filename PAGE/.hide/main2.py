#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jul 10, 2025 03:14:40 PM JST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_location = os.path.dirname(__file__)

import main2_support

_bgcolor = 'SystemButtonFace'
_fgcolor = 'SystemWindowText'
_tabfg1 = 'black' 
_tabfg2 = 'white' 
_bgmode = 'light' 
_tabbg1 = '#d9d9d9' 
_tabbg2 = 'gray40' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran: return        
    try: main2_support.root.tk.call('source',
                os.path.join(_location, 'themes', 'xpnative.tcl'))
    except: pass
    style = ttk.Style()
    style.theme_use('xpnative')
    style.configure('.', font = "TkDefaultFont")
    _style_code_ran = 1

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("1012x522+425+254")
        top.minsize(120, 1)
        top.maxsize(3844, 1061)
        top.resizable(1,  1)
        top.title("Toplevel 0")
        top.configure(highlightcolor="SystemWindowText")

        self.top = top
        self.combobox = tk.StringVar()
        self.tch63 = tk.IntVar()
        self.tch64 = tk.IntVar()

        self.menubar = tk.Menu(top, font="TkMenuFont", bg='SystemButtonFace'
                ,fg=_fgcolor)
        top.configure(menu = self.menubar)

        _style_code()
        self.TSeparator1 = ttk.Separator(self.top)
        self.TSeparator1.place(relx=0.494, rely=0.019,  relheight=0.958)
        self.TSeparator1.configure(orient="vertical")

        self.connection_frame = ttk.Labelframe(self.top)
        self.connection_frame.place(relx=0.01, rely=0.019, relheight=0.144
                , relwidth=0.478)
        self.connection_frame.configure(relief='')
        self.connection_frame.configure(text='''接続''')

        self.connection_pulldown = ttk.Combobox(self.connection_frame)
        self.connection_pulldown.place(relx=0.021, rely=0.533, relheight=0.307
                , relwidth=0.719, bordermode='ignore')
        self.connection_pulldown.configure(font="-family {Yu Gothic UI} -size 9")
        self.connection_pulldown.configure(textvariable=self.combobox)

        self.connection_btn = ttk.Button(self.connection_frame)
        self.connection_btn.place(relx=0.764, rely=0.533, height=26, width=105
                , bordermode='ignore')
        self.connection_btn.configure(text='''接続''')
        self.connection_btn.configure(compound='left')

        self.connection_text = ttk.Label(self.connection_frame)
        self.connection_text.place(relx=0.021, rely=0.267, height=19, width=95
                , bordermode='ignore')
        self.connection_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.connection_text.configure(relief="flat")
        self.connection_text.configure(text='''COMポート''')
        self.connection_text.configure(compound='left')

        self.receive_frame = ttk.Labelframe(self.top)
        self.receive_frame.place(relx=0.01, rely=0.172, relheight=0.795
                , relwidth=0.474)
        self.receive_frame.configure(relief='')
        self.receive_frame.configure(text='''受信''')

        self.receive_log_text = tk.Text(self.receive_frame)
        self.receive_log_text.place(relx=0.021, rely=0.048, relheight=0.805
                , relwidth=0.948, bordermode='ignore')
        self.receive_log_text.configure(background="white")
        self.receive_log_text.configure(font="TkTextFont")
        self.receive_log_text.configure(foreground="black")
        self.receive_log_text.configure(highlightbackground="#d9d9d9")
        self.receive_log_text.configure(highlightcolor="SystemWindowText")
        self.receive_log_text.configure(selectbackground="#d9d9d9")
        self.receive_log_text.configure(selectforeground="black")
        self.receive_log_text.configure(wrap="word")

        self.receive_showTimeStamp_chk = ttk.Checkbutton(self.receive_frame)
        self.receive_showTimeStamp_chk.place(relx=0.021, rely=0.867
                , relwidth=0.333, relheight=0.0, height=21, bordermode='ignore')
        self.receive_showTimeStamp_chk.configure(variable=self.tch63)
        self.receive_showTimeStamp_chk.configure(text='''タイムスタンプを表示''')
        self.receive_showTimeStamp_chk.configure(compound='left')

        self.receive_unitCodeConv_chk = ttk.Checkbutton(self.receive_frame)
        self.receive_unitCodeConv_chk.place(relx=0.021, rely=0.916
                , relwidth=0.292, relheight=0.0, height=21, bordermode='ignore')
        self.receive_unitCodeConv_chk.configure(variable=self.tch64)
        self.receive_unitCodeConv_chk.configure(text='''UnitCodeの自動変換''')
        self.receive_unitCodeConv_chk.configure(compound='left')

        self.receive_logClear_btn = ttk.Button(self.receive_frame)
        self.receive_logClear_btn.place(relx=0.75, rely=0.867, height=25
                , width=106, bordermode='ignore')
        self.receive_logClear_btn.configure(text='''クリア''')
        self.receive_logClear_btn.configure(compound='left')

        self.receive_dataFormat_pulldown = ttk.Combobox(self.receive_frame)
        self.receive_dataFormat_pulldown.place(relx=0.521, rely=0.916
                , relheight=0.055, relwidth=0.177, bordermode='ignore')
        self.value_list = ['DEC','BIN','HEX',]
        self.receive_dataFormat_pulldown.configure(values=self.value_list)
        self.receive_dataFormat_pulldown.configure(font="-family {Yu Gothic UI} -size 9")
        self.receive_dataFormat_pulldown.configure(textvariable=self.combobox)

        self.receive_dataFormat_text = ttk.Label(self.receive_frame)
        self.receive_dataFormat_text.place(relx=0.521, rely=0.867, height=19
                , width=95, bordermode='ignore')
        self.receive_dataFormat_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.receive_dataFormat_text.configure(relief="flat")
        self.receive_dataFormat_text.configure(text='''Dataの表示形式''')
        self.receive_dataFormat_text.configure(compound='left')

        self.send_frame = ttk.Labelframe(self.top)
        self.send_frame.place(relx=0.504, rely=0.019, relheight=0.489
                , relwidth=0.484)
        self.send_frame.configure(relief='')
        self.send_frame.configure(text='''送信''')

        self.send_phIndex_entry = ttk.Entry(self.send_frame)
        self.send_phIndex_entry.place(relx=0.367, rely=0.196, relheight=0.09
                , relwidth=0.114, bordermode='ignore')
        self.send_phIndex_entry.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_phIndex_entry.configure(cursor="ibeam")

        self.send_phEntry_entry = ttk.Entry(self.send_frame)
        self.send_phEntry_entry.place(relx=0.51, rely=0.196, relheight=0.09
                , relwidth=0.114, bordermode='ignore')
        self.send_phEntry_entry.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_phEntry_entry.configure(cursor="ibeam")

        self.send_phEntry_text = ttk.Label(self.send_frame)
        self.send_phEntry_text.place(relx=0.51, rely=0.118, height=19, width=35
                , bordermode='ignore')
        self.send_phEntry_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_phEntry_text.configure(relief="flat")
        self.send_phEntry_text.configure(text='''Entry''')
        self.send_phEntry_text.configure(compound='left')

        self.send_phIndex_text = ttk.Label(self.send_frame)
        self.send_phIndex_text.place(relx=0.367, rely=0.118, height=19, width=35
                , bordermode='ignore')
        self.send_phIndex_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_phIndex_text.configure(relief="flat")
        self.send_phIndex_text.configure(text='''Index''')
        self.send_phIndex_text.configure(compound='left')

        self.send_unitId_entry = ttk.Entry(self.send_frame)
        self.send_unitId_entry.place(relx=0.184, rely=0.196, relheight=0.09
                , relwidth=0.114, bordermode='ignore')
        self.send_unitId_entry.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_unitId_entry.configure(cursor="ibeam")

        self.send_unitCode_entry = ttk.Entry(self.send_frame)
        self.send_unitCode_entry.place(relx=0.041, rely=0.196, relheight=0.09
                , relwidth=0.114, bordermode='ignore')
        self.send_unitCode_entry.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_unitCode_entry.configure(cursor="ibeam")

        self.send_unitId_text = ttk.Label(self.send_frame)
        self.send_unitId_text.place(relx=0.184, rely=0.118, height=19, width=45
                , bordermode='ignore')
        self.send_unitId_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_unitId_text.configure(relief="flat")
        self.send_unitId_text.configure(text='''Unit ID''')
        self.send_unitId_text.configure(compound='left')

        self.send_unitCode_text = ttk.Label(self.send_frame)
        self.send_unitCode_text.place(relx=0.041, rely=0.118, height=19, width=65
                , bordermode='ignore')
        self.send_unitCode_text.configure(font="-family {Yu Gothic UI} -size 9")
        self.send_unitCode_text.configure(relief="flat")
        self.send_unitCode_text.configure(text='''Unit Code''')
        self.send_unitCode_text.configure(compound='left')

def start_up():
    main2_support.main()

if __name__ == '__main__':
    main2_support.main()




