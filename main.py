#!python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jul 10, 2025 07:37:21 PM JST  platform: Windows NT

import sys
import os
import time
import atexit
import threading
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import ui

import serial
import serial.tools.list_ports

_debug = True # False to eliminate debug printing from callback functions.

serialPort = ''

portDeviceNameList = []
portNumberList = []
portIdx = 0

win = ''

win_title = "EtherCAN Sniffer Client"
win_version = "v1.0"

IS_SNIFFERING = 0

LOG_LEVEL_ERR = 0
LOG_LEVEL_WARN = 1
LOG_LEVEL_DATA = 2
LOG_LEVEL_INFO = 3

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = ui.Toplevel1(_top1)

    init()

    root.mainloop()

if __name__ == '__main__':
    ui.start_up()

def init():
    atexit.register(on_exit)

def on_exit():
    stopSniffering()


def changeWindowSubTitle(sub=None):
    if(sub == None):
        root.title("{0} {1}".format(win_title, win_version))
    else:    
        root.title("{0} {1} - {2}".format(win_title, win_version, sub))


def passWindowInstance(win_instance):
    global win
    win = win_instance


def displayCOMPort():
    global portDeviceNameList, portNumberList

    portDeviceNameList = []
    portNumberList = []

    for port in serial.tools.list_ports.comports():
        portDeviceNameList.append(port.description)
        portNumberList.append(port.device)
    
    win.connection_pulldown["values"] = portDeviceNameList
    win.connection_pulldown.set(portDeviceNameList[0])


def connectUART():
    global portDeviceNameList, portIdx, serialPort

    disconnectUART()
    changeWindowSubTitle("COMポート未接続")

    portIdx = -1
    selectedPort = win.connection_pulldown.get()
    
    for i in range(len(portDeviceNameList)):
        if(portDeviceNameList[i] == selectedPort):
            portIdx = i

    try:
        serialPort = serial.Serial(
            portNumberList[portIdx],
            115200,
            timeout=3
        )

        printLog("{0}に接続しました。".format(portNumberList[portIdx]))
        changeWindowSubTitle("COMポート接続済み")
        startSniffering()
    except:
        printLog("{0}への接続に失敗しました。".format(portNumberList[portIdx]), LOG_LEVEL_ERR)


def disconnectUART():
    global serialPort

    if(serialPort != ''):
        printLog("{0}との接続を切断しました。".format(portNumberList[portIdx]), LOG_LEVEL_INFO)
        changeWindowSubTitle("COMポート未接続")

    try:
        serialPort.close()
        serialPort = ''
    except:
        pass

    stopSniffering()


def thread_UART_read():
    global serialPort, IS_SNIFFERING

    while(IS_SNIFFERING):
        if(serialPort != ''):
            if serialPort.in_waiting > 0:
                line = serialPort.readline().strip().decode("utf-8")
                if line[0] == "C":
                    printLogCAN(line)
            else:
                time.sleep(0.01)  # 少し待機


def printLogCAN(data_raw):
    data = data_raw.split()

    if(data[1] == "R"):
        line = "RX "
    else:
        line = "TX "
    
    line += "Code:{0} ".format(data[2])
    line += "Id:{0} ".format(data[3])
    line += "ISM:{0} ".format(data[4])
    line += "| Idx:{0} ".format(data[6])
    line += "Etr:{0} ".format(data[7])
    line += "|"

    for i in range(int(data[5]) - 1):
        line += " 0d{0}".format(data[8 + i])
    
    printLog(line, LOG_LEVEL_DATA)


def clearLog():
    win.receive_log_text.config(state="normal")
    win.receive_log_text.delete(1.0, tk.END)
    win.receive_log_text.config(state="disabled")


def startSniffering():
    global IS_SNIFFERING

    thread_1 = threading.Thread(target=thread_UART_read, daemon=True)
    IS_SNIFFERING = 1
    thread_1.start()

def stopSniffering():
    global IS_SNIFFERING
    IS_SNIFFERING = 0


def addLog(string):
    if(string == ''):
        return
    
    win.receive_log_text.config(state="normal")
    win.receive_log_text.insert(tk.END, string)
    win.receive_log_text.config(state="disabled")


def printLog(line, level=3):
    if(line == ''):
        return

    win.receive_log_text.config(state="normal")

    if(level == 0):
        win.receive_log_text.insert(tk.END, "[ERR]  ")
    elif(level == 1):
        win.receive_log_text.insert(tk.END, "[WARN] ")
    elif(level == 2):
        win.receive_log_text.insert(tk.END, "[CAN]  ")
    elif(level == 3):
        win.receive_log_text.insert(tk.END, "[INFO] ")
    else:
        win.receive_log_text.insert(tk.END, "[MISC] ")

    win.receive_log_text.insert(tk.END, line + "\n")
    win.receive_log_text.config(state="disabled")
    win.receive_log_text.see(tk.END)

def dumpUART(line):
    line_li = line.sprit()
