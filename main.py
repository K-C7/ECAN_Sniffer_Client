#!python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    Jul 10, 2025 07:37:21 PM JST  platform: Windows NT

import sys
import os
import time
import atexit
import ctypes
import threading
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *

import ui

import serial
import serial.tools.list_ports

_debug = True # False to eliminate debug printing from callback functions.

serialPort = ''
writeLine = None

portDeviceNameList = []
portNumberList = []
portIdx = 0

win = ''

win_title = "EtherCAN Sniffer Client"
win_version = "v1.0"

IS_SNIFFERING = 0

LOG_LEVEL_ERR = 0
LOG_LEVEL_WARN = 1
LOG_LEVEL_DATA = 2
LOG_LEVEL_INFO = 3

receive_dataFormat_pulldown_selections = ['DEC','BIN','HEX']
send_datax_type_pulldown_selections = ['DEC','BIN','HEX']
send_sendMode_pulldown_selections = ['Main -> Unit','Unit -> Main','Sniffer -> Main']
send_sendMode_addressText = ["送信先のAddress", "送信元のAddress", "SnifferのAddress"]
send_sendMode_ism = [1, 0, 2]

def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = ui.Toplevel1(_top1)

    init()

    root.mainloop()

if __name__ == '__main__':
    ui.start_up()




# ------ Init / App ------
def init():
    atexit.register(on_exit)
    comboSelectInit()
    onSendModeChange()

    win.receive_log_text.config(state="disabled")

def on_exit():
    stopSniffering()
    disconnectUART()

def comboSelectInit():
    global win
    win.receive_dataFormat_pulldown.set(receive_dataFormat_pulldown_selections[0])

    win.send_data1_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data2_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data3_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data4_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data5_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data6_type_pulldown.set(send_datax_type_pulldown_selections[0])
    win.send_data7_type_pulldown.set(send_datax_type_pulldown_selections[0])
    
    win.send_sendMode_pulldown.set(send_sendMode_pulldown_selections[0])

def changeWindowSubTitle(sub=None):
    if(sub == None):
        root.title("{0} {1}".format(win_title, win_version))
    else:    
        root.title("{0} {1} - {2}".format(win_title, win_version, sub))

def passWindowInstance(win_instance):
    global win
    win = win_instance



# ------ Connection ------
def displayCOMPort():
    global portDeviceNameList, portNumberList

    portDeviceNameList = []
    portNumberList = []

    for port in serial.tools.list_ports.comports():
        portDeviceNameList.append(port.description)
        portNumberList.append(port.device)
    
    win.connection_pulldown["values"] = portDeviceNameList
    win.connection_pulldown.set(portDeviceNameList[0])


def connectUART():
    global portDeviceNameList, portIdx, serialPort

    disconnectUART()
    changeWindowSubTitle("COMポート未接続")

    portIdx = -1
    selectedPort = win.connection_pulldown.get()
    
    for i in range(len(portDeviceNameList)):
        if(portDeviceNameList[i] == selectedPort):
            portIdx = i

    try:
        serialPort = serial.Serial(
            portNumberList[portIdx],
            115200,
            timeout=3
        )

        printLog("{0}に接続しました。".format(portNumberList[portIdx]))
        changeWindowSubTitle("COMポート接続済み")
        sendUART("Hello Sniffer!\n")
        startSniffering()
    except:
        printLog("{0}への接続に失敗しました。".format(portNumberList[portIdx]), LOG_LEVEL_ERR)


def disconnectUART():
    global serialPort

    if(serialPort != ''):
        printLog("{0}との接続を切断しました。".format(portNumberList[portIdx]), LOG_LEVEL_INFO)
        changeWindowSubTitle("COMポート未接続")

    try:
        serialPort.close()
        serialPort = ''
    except:
        pass

    stopSniffering()



# ------ Receive ------
def printLog(line, level=3):
    if(line == ''):
        return

    win.receive_log_text.config(state="normal")

    if(level == 0):
        win.receive_log_text.insert(tk.END, "[ERR]  ")
    elif(level == 1):
        win.receive_log_text.insert(tk.END, "[WARN] ")
    elif(level == 2):
        win.receive_log_text.insert(tk.END, "[CAN]  ")
    elif(level == 3):
        win.receive_log_text.insert(tk.END, "[INFO] ")
    else:
        win.receive_log_text.insert(tk.END, "[SNIF] ")

    win.receive_log_text.insert(tk.END, line + "\n")
    win.receive_log_text.config(state="disabled")
    win.receive_log_text.see(tk.END)

def addLog(string):
    if(string == ''):
        return
    
    win.receive_log_text.config(state="normal")
    win.receive_log_text.insert(tk.END, string)
    win.receive_log_text.config(state="disabled")

def clearLog():
    win.receive_log_text.config(state="normal")
    win.receive_log_text.delete(1.0, tk.END)
    win.receive_log_text.config(state="disabled")


def printLogCAN(data_raw):
    data = data_raw.split()

    if(data[1] == "R"):
        line = "RX "
    else:
        line = "TX "
    
    line += "{0} ".format(data[2])
    line += "{0} ".format(data[3])
    line += "{0} ".format(data[4])
    line += "| {0} ".format(data[6])
    line += "{0} ".format(data[7])
    line += "|"

    for i in range(int(data[5]) - 1):
        data[8 + i] = int(data[8 + i], 10)

        if(win.receive_dataFormat_pulldown.get() == 'DEC'):
            line += " {0}".format(data[8 + i])
        elif(win.receive_dataFormat_pulldown.get() == 'BIN'):
            line += " {0}".format(bin(data[8 + i]))
        else:
            line += " {0}".format(hex(data[8 + i]))
    
    printLog(line, LOG_LEVEL_DATA)



# ------ Send ------

def sendPacket():
    ism = -1
    for i in range(3):
        if(win.send_sendMode_pulldown.get() == send_sendMode_pulldown_selections[i]):
            ism = send_sendMode_ism[i]

    line = []

    line.append("C")
    line.append("T")
    line.append(win.send_unitCode_entry.get()) # Unit code
    line.append(win.send_unitId_entry.get()) # Unit id
    line.append(ism) # isSendFromMain

    data = []
    data.append(win.send_data1_entry.get())
    data.append(win.send_data2_entry.get())
    data.append(win.send_data3_entry.get())
    data.append(win.send_data4_entry.get())
    data.append(win.send_data5_entry.get())
    data.append(win.send_data6_entry.get())
    data.append(win.send_data7_entry.get())

    dlc = 1

    for i in range(7):
        if(data[i] == ""):
            break
        
        dlc += 1

    line.append(dlc)
    line.append(win.send_phIndex_entry.get())
    line.append(win.send_phEntry_entry.get())

    lineStr = ""

    for i in line:
        lineStr += str(i) + " "
    
    for i in data:
        lineStr += str(i) + " "

    try:
        sendUART(lineStr + "\n")
        printLogCAN(lineStr)
    except:
        printLog("ECANパケットの送信に失敗しました。", LOG_LEVEL_ERR)


def onSendModeChange():
    for i in range(3):
        if(win.send_sendMode_pulldown.get() == send_sendMode_pulldown_selections[i]):
            win.TLabel2.config(text=send_sendMode_addressText[i])
            if(i == 2):
                win.send_unitCode_entry["state"] = "disable"
                win.send_unitId_entry["state"] = "disable"
            else:
                win.send_unitCode_entry["state"] = "enable"
                win.send_unitId_entry["state"] = "enable"



# ------ UART/CAN/Sniffering ------

def sendUART(line):
    try:
        serialPort.write(line.encode())
    except Exception as e:
        printLog("ECANパケットの送信に失敗しました。", LOG_LEVEL_ERR)
        print(e)


def startSniffering():
    global IS_SNIFFERING

    thread_1 = threading.Thread(target=thread_UART_read, daemon=True)
    IS_SNIFFERING = 1

    thread_1.start()

def stopSniffering():
    global IS_SNIFFERING
    IS_SNIFFERING = 0

def thread_UART_read():
    global serialPort, IS_SNIFFERING

    while(IS_SNIFFERING):
        if(serialPort != ''):
            if serialPort.in_waiting > 0:
                line = serialPort.readline().strip().decode("utf-8")
                if line[0] == "C":
                    printLogCAN(line)
                else:
                    printLog(line, -1)
            else:
                time.sleep(0.01)  # 少し待機
